//
//  Observable+Connect.swift
//  RxConnect
//
//  Created by Даниил Апальков on 07.08.2021.
//


#if os(iOS) || os(tvOS)

    #if !RX_NO_MODULE
        import RxSwift
        import RxCocoa
        import NSObject_Rx
        import Foundation
    #endif

#endif

extension ObservableType {
    /// Connects this observable to a handling function, using autogenerated Dispose Bag of a target NSObject
    /// - Parameters:
    ///   - object: Target, witch Dispose Bag will be used in process of connecting
    ///   - onNext: Handling function
    public func connect(_ object: NSObject, to onNext: @escaping (Element) -> Void) {
        bind(onNext: onNext).disposed(by: object.rx.disposeBag)
    }
    
    /// Connects this observable to some observer, using autogenerated Dispose Bag of a target NSObject
    /// - Parameters:
    ///   - object: Target, witch Dispose Bag will be used in process of connecting
    ///   - observer: Observer
    public func connect<Observer: ObserverType>(_ object: NSObject, to observer: Observer) where Element == Observer.Element {
        bind(to: observer).disposed(by: object.rx.disposeBag)
    }
    
    /// Connects this observable to PublishRelay, using autogenerated Dispose Bag of a target NSObject
    /// - Parameters:
    ///   - object: Target, witch Dispose Bag will be used in process of connecting
    ///   - relay: PublishRelay
    public func connect(_ object: NSObject, to relay: PublishRelay<Element>) {
        bind(to: relay).disposed(by: object.rx.disposeBag)
    }
    
    /// Connects this observable to BehaviorRelay, using autogenerated Dispose Bag of a target NSObject
    /// - Parameters:
    ///   - object: Target, witch Dispose Bag will be used in process of connecting
    ///   - relay: BehaviorRelay
    public func connect(_ object: NSObject, to relay: BehaviorRelay<Element>) {
        bind(to: relay).disposed(by: object.rx.disposeBag)
    }
    
    /// Connects this observable to ReplayRelay, using autogenerated Dispose Bag of a target NSObject
    /// - Parameters:
    ///   - object: Target, witch Dispose Bag will be used in process of connecting
    ///   - relay: ReplayRelay
    public func connect(_ object: NSObject, to relay: ReplayRelay<Element>) {
        bind(to: relay).disposed(by: object.rx.disposeBag)
    }
}

extension Reactive {
    /// Connects target-object with observing code provided by a **connectClosure**
    /// - Parameters:
    ///   - object: Target, witch Dispose Bag will be used in process of connecting
    ///   - connectClosure: Provides a reactive extension of a class on witch connect is used, and a ReactiveConnector
    ///
    /// For example
    /// ~~~
    /// tableView.rx.connect(self) { events, connector in
    ///      connector.connect(events.itemHighlighted, to: myItemHighlightedObserver)
    ///      connector.connect(events.itemSelected, to: myItemSelectedObserver)
    /// }
    /// ~~~
    
    public func connect(_ object: NSObject, connectClosure: (Reactive<Base>, ReactiveConnector) -> Void) {
        connectClosure(self, ReactiveConnector(object))
    }
    
    /// Connects target-object with observing code provided by a **connectBuilder**
    /// - Parameters:
    ///   - object: Target, witch Dispose Bag will be used in process of connecting
    ///   - connectBuilder: Result Builder, that provides a reactive extension of a class on witch connect is used
    func connect(_ object: NSObject, @ConnectionBuilder connectBuilder: (Reactive<Base>) -> [Disposable]) {
        let disposables = connectBuilder(self)
        for disposable in disposables {
            disposable.disposed(by: object.rx.disposeBag)
        }
    }
}

/// Class, used to connect observer to observable using autogenerated Dispose Bag of a target NSObject
public class ReactiveConnector {
    private weak var target: NSObject?
    
    public init(_ target: NSObject) {
        self.target = target
    }
    
    /// Subscribes observer to observable using target's Dispose Bag
    /// - Parameters:
    ///   - observable: Some ObservableType to observe
    ///   - observer: Some observer
    public func connect<Observable: ObservableType, Observer: ObserverType>(_ observable: Observable, to observer: Observer) where
        Observable.Element == Observer.Element {
        guard let target = target else { return }
        observable.connect(target, to: observer)
    }
    
    /// Subscribes observer to the handling function using target's Dispose Bag
    /// - Parameters:
    ///   - observable: Some ObservableType to observe
    ///   - onNext: Some observer
    public func connect<Observable: ObservableType, Element>(_ observable: Observable, to onNext: @escaping (Element) -> Void) where
        Observable.Element == Element {
        guard let target = target else { return }
        observable.connect(target, to: onNext)
    }
}

@resultBuilder
/// Result Builder, that collects and returns array of Disposable
struct ConnectionBuilder {
    static func buildBlock(_ disposables: Disposable...) -> [Disposable] { disposables }
}
